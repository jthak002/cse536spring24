import time
import subprocess

"""
This attack is related to the pipe_wait state attack but it has been modified based 
on adjustments to modern linux
At the heart of this attack is the following shell command:
    ps -eo user,pid,args,wchan | grep pipe
This attack finds the process id for each pipe used from the moderator to the player. 
The process id updates whenever the pipe has been written to in readVulnerability1.
The process id changing can be exploited if monitored correctly by the attacking player. 
"""

pipe_root = '/home/moderator/pipes'

def find_process_using_pipe(pipe_name):
    """
    Returns the pid of a pipe (from moderator to player) if it exists.
    """
    try:
        ps_output = subprocess.check_output(['ps', '-eo', 'pid,args'])
        ps_lines = ps_output.decode().split('\n')
        for line in ps_lines[1:]:
            fields = line.strip().split(maxsplit=1)
            if len(fields) == 2:
                pid, args = fields
                if pipe_name in args:
                    return pid
    except subprocess.CalledProcessError:
        pass
    return None

# Possible pipe names for all 15 players
pipe_names = [f'{pipe_root}/sto{i}D/sto{i}' for i in range(16)]

def check_pipes(player_pids):
    for i, pipe in enumerate(pipe_names):
        try:
            process = find_process_using_pipe(pipe)
            # set the player's index to the process id
            player_pids[i] = process
        except Exception:
            pass
    return player_pids

def surveil_processes():
    """
    Continuosly checks the process ids and compares each to the corresponding previous process id
    """
    # Create empty array for player pipe processes
    player_pids = [0] * 15
    # Initial state of pipe pids
    player_pids = check_pipes(player_pids)
    while True:
        newest_player_pids = check_pipes([0]*15)
        for i, pidOld, pidNew in zip(player_pids, newest_player_pids):
            if pidOld != pidNew:
                print(f"pid for Player{i} has changed!" )
        player_pids = newest_player_pids
        time.sleep(1)


def main():
    surveil_processes()

if __name__ == "__main__":
    main()
        
        
        
    